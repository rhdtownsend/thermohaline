#:include 'forum.inc'

module thermo_m

   ! Uses

   use forum_m, split_ => split
   use params_m
   use matrix_m

   use f95_lapack

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Accessibility

   private

   public :: eigen_max
   public :: eigen_all
   public :: eigen_2nd_order

contains

   subroutine eigen_max(N, pa, split, shift, invert, reorder, sig, use_mesa)

      integer, intent(in)            :: N
      type(params_t), intent(in)     :: pa
      logical, intent(in)            :: split
      logical, intent(in)            :: shift
      logical, intent(in)            :: invert
      logical, intent(in)            :: reorder
      real(RD), intent(out)          :: sig
      logical, intent(in), optional  :: use_mesa

      complex(RD) :: sig_all(4*(2*N+1))

      ! Calculate the maximal value of the real part of all eigenvalues

      call eigen_all(N, pa, split, shift, invert, reorder, sig_all, use_mesa)

      sig = MAXVAL(REAL(sig_all, RD))

   end subroutine eigen_max

   !****

   subroutine eigen_all(N, pa, split, shift, invert, reorder, sig, use_mesa)

      integer, intent(in)            :: N
      type(params_t), intent(in)     :: pa
      logical, intent(in)            :: split
      logical, intent(in)            :: shift
      logical, intent(in)            :: invert
      logical, intent(in)            :: reorder
      complex(RD), intent(out)       :: sig(:)
      logical, intent(in), optional  :: use_mesa

      integer               :: s
      real(RD), allocatable :: A(:,:)
      real(RD)              :: sig_shift
      real(RD), allocatable :: wr(:)
      real(RD), allocatable :: wi(:)
      integer, allocatable  :: ipiv(:)
      real(RD), allocatable :: work(:)
      integer               :: info
      integer, allocatable  :: j(:)
      integer               :: i
      integer               :: k

      @:CHECK_BOUNDS(SIZE(sig), 4*(2*N+1))

      ! Calculate all eigenvalues of the A matrix

      if (split) then

         s = 2*(2*N+1)

         allocate(A(s,s))
         allocate(wr(s))
         allocate(wi(s))

         allocate(ipiv(s))
         allocate(work(2*s))

         call eval_matrix(N, pa, A, parity=.TRUE., use_mesa=use_mesa)

         if (shift) then
            sig_shift = REAL(A(s,s), RD)
            A = A - sig_shift
         else
            sig_shift = 0._RD
         end if

         if (invert) then
            call DGETRF(s, s, A, s, ipiv, info)
            call DGETRI(s, A, s, ipiv, work, SIZE(work), info)
         end if

         if (reorder) then
            A = A(s:1:-1,s:1:-1)
         end if

         call LA_GEEV(A, wr, wi)

         if (invert) then
            sig(1::2) = 1._RD/CMPLX(wr, wi, KIND=RD) + sig_shift
         else
            sig(1::2) = CMPLX(wr, wi, KIND=RD) + sig_shift
         end if
         
         call eval_matrix(N, pa, A, parity=.FALSE., use_mesa=use_mesa)

         if (shift) then
            sig_shift = REAL(A(s,s), RD)
            A = A - sig_shift
         else
            sig_shift = 0._RD
         end if

         if (invert) then
            call DGETRF(s, s, A, s, ipiv, info)
            call DGETRI(s, A, s, ipiv, work, SIZE(work), info)
         end if

         if (reorder) then

            allocate(j(s))

            i = 1

            do k = 1, N

               j(i) = 4*(N - k) + 3
               j(i+1) = j(i) + 1
               j(i+2) = j(i) + 2
               j(i+3) = j(i) + 3

               i = i + 4

            end do

            j(i) = 1
            j(i+1) = j(i) + 1

            A = A(j,j)

         end if

         call LA_GEEV(A, wr, wi)

         if (invert) then
            sig(2::2) = 1._RD/CMPLX(wr, wi, KIND=RD) + sig_shift
         else
            sig(2::2) = CMPLX(wr, wi, KIND=RD) + sig_shift
         end if

      else

         s = 4*(2*N+1)

         allocate(A(s,s))
         allocate(wr(s))
         allocate(wi(s))

         allocate(ipiv(s))
         allocate(work(2*s))

         call eval_matrix(N, pa, A, use_mesa=use_mesa)

         if (shift) then
            sig_shift = REAL(A(4*(2*N+1),4*(2*N+1)), RD)
            A = A - sig_shift
         else
            sig_shift = 0._RD
         end if

         if (invert) then
            call DGETRF(s, s, A, s, ipiv, info)
            call DGETRI(s, A, s, ipiv, work, SIZE(work), info)
         end if

         if (reorder) then

            allocate(j(s))

            i = 1

            do k = 1, 2*N+1

               if (MOD(k, 2) == 0) then
                  j(i) = 2*(4*N-k) + 5
                  j(i+1) = j(i) + 1
                  j(i+2) = j(i) + 2
                  j(i+3) = j(i) + 3
               else
                  j(i) = 2*(k-1) + 1
                  j(i+1) = j(i) + 1
                  j(i+2) = j(i) + 2
                  j(i+3) = j(i) + 3
               endif

               i = i + 4

            end do

            A = A(j,j)

         end if

         call LA_GEEV(A, wr, wi)

         if (invert) then
            sig = 1._RD/CMPLX(wr, wi, KIND=RD) + sig_shift
         else
            sig = CMPLX(wr, wi, KIND=RD) + sig_shift
         end if

      end if

      ! Finish

   end subroutine eigen_all

   !****

   subroutine eigen_2nd_order(N, pa, sig, partition, use_mesa)

      integer, intent(in)           :: N
      type(params_t), intent(in)    :: pa
      complex(RD), intent(out)      :: sig(:)
      logical, intent(in), optional :: partition
      logical, intent(in), optional :: use_mesa

      real(RD)       :: A(2*(2*N+1),2*(2*N+1))
      type(params_t) :: pa_

      ! Calculate second-order eigenvalues of the A matrix

      pa_ = params_t(pa%R_0, pa%Pr, pa%tau, pa%H_B, pa%D_B, 1._RD, pa%k_z)

      call eval_matrix(N, pa_, A, parity=.TRUE., use_mesa=use_mesa)
      call pert_expand(N, pa%w_f, A, sig(1::2), partition=partition)

      call eval_matrix(N, pa_, A, parity=.FALSE., use_mesa=use_mesa)
      call pert_expand(N, pa%w_f, A, sig(2::2), partition=partition)

   end subroutine eigen_2nd_order

   !****

   subroutine pert_expand(N, w_f, A, sig, partition)

      integer, intent(in)           :: N
      real(RD), intent(in)          :: w_f
      real(RD), intent(in)          :: A(:,:)
      complex(RD), intent(out)      :: sig(:)
      logical, intent(in), optional :: partition

      logical     :: partition_
      real(RD)    :: A_0(2*(2*N+1),2*(2*N+1))
      real(RD)    :: A_1(2*(2*N+1),2*(2*N+1))
      integer     :: i
      integer     :: k
      integer     :: m
      complex(RD) :: XL(2*(2*N+1),2*(2*N+1))
      complex(RD) :: XR(2*(2*N+1),2*(2*N+1))
      complex(RD) :: V(2*(2*N+1),2*(2*N+1))
      complex(RD) :: dsig(2*(2*N+1))

      @:CHECK_BOUNDS(SIZE(A, 1), 2*(2*N+1))
      @:CHECK_BOUNDS(SIZE(A, 2), 2*(2*N+1))

      @:CHECK_BOUNDS(SIZE(sig), 2*(2*N+1))

      if (PRESENT(partition)) then
         partition_ = partition
      else
         partition_ = .FALSE.
      end if
      
      ! Isolate the zeroth and first-order parts of the matrices

      A_0 = 0._RD

      A_0(1:2,1:2) = A(1:2,1:2)

      i = 3

      do m = 1, N
         A_0(i:i+3,i:i+3) = A(i:i+3,i:i+3)
         i = i + 4
      end do

      A_1 = A - A_0

      ! Calculate eigenvalues and eigenvectors of the zeroth-order matrix

      if (partition_) then

         XL = 0._RD
         XR = 0._RD

         ! Handle the first 2x2 block

         call solve_eigen(2, A_0(1:2,1:2), sig(1:2), XL(1:2,1:2), XR(1:2,1:2))

         ! Handle the other blocks

         i = 3

         do m = 1, N
            call solve_eigen(4, A_0(i:i+3,i:i+3), sig(i:i+3), XL(i:i+3,i:i+3), XR(i:i+3,i:i+3))
            i = i + 4
         end do

      else

         call solve_eigen(2*(2*N+1), A_0, sig, XL, XR)

      end if

      ! Calculate the overlap matrix

      V = MATMUL(TRANSPOSE(CONJG(XL)), MATMUL(A_1, XR))

      ! Evaluate the second-order corrections to w

      dsig = 0._RD

      row_loop: do i = 1, 2*(2*N+1)
         col_loop: do k = 1, 2*(2*N+1)
            if (i == k) then
               cycle col_loop
            end if
            dsig(i) = dsig(i) + V(i,k)*V(k,i)/(sig(i) - sig(k))
         end do col_loop
      end do row_loop

      ! Apply the corrections

      sig = sig + w_f**2*dsig

   end subroutine pert_expand

   !****

   subroutine solve_eigen(n, A, sig, XL, XR)

      integer, intent(in)      :: n
      real(RD), intent(in)     :: A(:,:)
      complex(RD), intent(out) :: sig(:)
      complex(RD), intent(out) :: XL(:,:)
      complex(RD), intent(out) :: XR(:,:)

      real(RD) :: A_tmp(n,n)
      real(RD) :: sig_re(n)
      real(RD) :: sig_im(n)
      real(RD) :: XL_reim(n,n)
      real(RD) :: XR_reim(n,n)
      integer  :: i

      @:CHECK_BOUNDS(SIZE(A, 1), n)
      @:CHECK_BOUNDS(SIZE(A, 2), n)

      @:CHECK_BOUNDS(SIZE(sig), n)
      
      @:CHECK_BOUNDS(SIZE(XL, 1), n)
      @:CHECK_BOUNDS(SIZE(XL, 2), n)
      
      @:CHECK_BOUNDS(SIZE(XR, 1), n)
      @:CHECK_BOUNDS(SIZE(XR, 2), n)
      
      ! Solve the eigenproblem to find eigenvalues and left/right
      ! eigenvectors (stored as column vectors in the XL/XR matrices,
      ! respectively)

      A_tmp = A

      call LA_GEEV(A_tmp, sig_re, sig_im, XL_reim, XR_reim)

      sig = CMPLX(sig_re, sig_im, KIND=RD)

      XL(:,1::2) = CMPLX(XL_reim(:,1::2),  XL_reim(:,2::2), KIND=RD)
      XL(:,2::2) = CMPLX(XL_reim(:,1::2), -XL_reim(:,2::2), KIND=RD)

      XR(:,1::2) = CMPLX(XR_reim(:,1::2),  XR_reim(:,2::2), KIND=RD)
      XR(:,2::2) = CMPLX(XR_reim(:,1::2), -XR_reim(:,2::2), KIND=RD)

      ! Rescale left eigenvectors so left-right pairs have a dot produce of unity

      do i = 1, n
         XL(:,i) = XL(:,i)/DOT_PRODUCT(XL(:,i), XR(:,i))
      end do

      ! Check that XL and XR^T are (almost) inverses

      !associate (P => MATMUL(TRANSPOSE(CONJG(XL)), XR))
      !   print *,'range:', MINVAL(REAL(P)), MAXVAL(REAL(P)), MINVAL(AIMAG(P)), MAXVAL(AIMAG(P))
      !end associate

   end subroutine solve_eigen

   ! !****

   ! subroutine eigen_max(N, pa, sig_max)

   !    integer, intent(in)        :: N
   !    type(params_t), intent(in) :: pa
   !    complex(RD), intent(out)   :: sig_max

   !    integer, parameter  :: NEV = 1
   !    integer, parameter  :: NCV = 2*NEV + 1
   !    integer, parameter  :: LWORKL = 3*NCV**2 + 6*NCV
   !    real(RD), parameter :: TOL = 1E-6_RD

   !    integer  :: ido
   !    integer  :: iparam(11)
   !    integer  :: ipntr(14)
   !    real(RD) :: resid(4*(2*N+1))
   !    real(RD) :: v(4*(2*N+1),NCV)
   !    real(RD) :: workd(3*4*(2*N+1))
   !    real(RD) :: workl(LWORKL)
   !    integer  :: info
   !    real(RD) :: dr(NEV+1)
   !    real(RD) :: di(NEV+1)
   !    real(RD) :: z(4*(2*N+1),NEV+1)
   !    real(RD) :: workev(3*NCV)
   !    logical  :: select(NCV)
   !    integer  :: ierr

   !    ! Find the maximal eigenvalue

   !    ! First set up parameters

   !    iparam = 0

   !    iparam(1) = 1
   !    iparam(3) = 300
   !    iparam(7) = 1

   !    ido = 0
   !    info = 0

   !    iter_loop : do

   !       call DNAUPD(ido, 'I', 4*(2*N+1), 'LR', NEV, TOL, resid, &
   !          NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, LWORKL, &
   !          info)

   !       if (ido == -1 .OR. ido == 1) then

   !          associate( &
   !             x => workd(ipntr(1):ipntr(1)+4*(2*N+1)-1), &
   !             y => workd(ipntr(2):ipntr(2)+4*(2*N+1)-1))

   !             call eval_prod(N, pa, x, y)

   !          end associate

   !       else

   !          exit iter_loop

   !       end if

   !    end do iter_loop

   !    ! Check for convergence

   !    if (info < 0) then

   !       print *, ' '
   !       print *, ' Error with _naupd, info = ', info
   !       print *, ' Check the documentation of _naupd'
   !       print *, ' '
   !       stop

   !    else

   !       call DNEUPD(.FALSE., 'A', select, dr, di, z, SIZE(z, 1), &
   !          0._RD, 0._RD, workev, 'I', 4*(2*N+1), 'LR', NEV, TOL, &
   !          resid, NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, &
   !          LWORKL, ierr)

   !       if (ierr /= 0) then

   !          print *, ' '
   !          print *, ' Error with _neupd, info = ', ierr
   !          print *, ' Check the documentation of _neupd. '
   !          print *, ' '
   !          stop

   !       end if
         
   !    endif

   !    ! Store the eigenvalue

   !    sig_max = CMPLX(dr(1), di(1), KIND=RD)

   !    print *,sig_max

   ! end subroutine eigen_max

   ! !****

   ! subroutine eigen_close(N, pa, sig_shift, sig_close)
      
   !    integer, intent(in)        :: N
   !    type(params_t), intent(in) :: pa
   !    complex(RD), intent(in)    :: sig_shift
   !    complex(RD), intent(out)   :: sig_close

   !    integer, parameter  :: NEV = 1
   !    integer, parameter  :: NCV = 2*NEV + 1
   !    integer, parameter  :: LWORKL = 3*NCV**2 + 6*NCV
   !    real(RD), parameter :: TOL = 1E-6_RD

   !    integer  :: ido
   !    integer  :: iparam(11)
   !    integer  :: ipntr(14)
   !    real(RD) :: resid(4*(2*N+1))
   !    real(RD) :: v(4*(2*N+1),NCV)
   !    real(RD) :: workd(3*4*(2*N+1))
   !    real(RD) :: workl(LWORKL)
   !    integer  :: info
   !    real(RD) :: dr(NEV+1)
   !    real(RD) :: di(NEV+1)
   !    real(RD) :: z(4*(2*N+1),NEV+1)
   !    real(RD) :: workev(3*NCV)
   !    logical  :: select(NCV)
   !    integer  :: ierr

   !    ! Find the maximal eigenvalue

   !    ! First set up parameters

   !    iparam = 0

   !    iparam(1) = 1
   !    iparam(3) = 300
   !    iparam(7) = 1

   !    ido = 0
   !    info = 0

   !    iter_loop : do

   !       call DNAUPD(ido, 'I', 4*(2*N+1), 'SR', NEV, TOL, resid, &
   !          NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, LWORKL, &
   !          info)

   !       if (ido == -1 .OR. ido == 1) then

   !          associate( &
   !             x => workd(ipntr(1):ipntr(1)+4*(2*N+1)-1), &
   !             y => workd(ipntr(2):ipntr(2)+4*(2*N+1)-1))

   !             call eval_prod(N, pa, x, y)

   !          end associate

   !       else

   !          exit iter_loop

   !       end if

   !    end do iter_loop

   !    ! Check for convergence

   !    if (info < 0) then

   !       print *, ' '
   !       print *, ' Error with _naupd, info = ', info
   !       print *, ' Check the documentation of _naupd'
   !       print *, ' '
   !       stop

   !    else

   !       call DNEUPD(.FALSE., 'A', select, dr, di, z, SIZE(z, 1), &
   !          0._RD, 0._RD, workev, 'I', 4*(2*N+1), 'LM', NEV, TOL, &
   !          resid, NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, &
   !          LWORKL, ierr)

   !       if (ierr /= 0) then

   !          print *, ' '
   !          print *, ' Error with _neupd, info = ', ierr
   !          print *, ' Check the documentation of _neupd. '
   !          print *, ' '
   !          stop

   !       end if
         
   !    endif

   !    ! Store the eigenvalue

   !    sig_close = CMPLX(dr(1), di(1), KIND=RD)

   !    print *,sig_close

   ! end subroutine eigen_close

end module thermo_m
