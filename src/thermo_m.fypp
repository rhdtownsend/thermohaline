#:include 'forum.inc'

module thermo_m

   ! Uses

   use forum_m, split_ => split
   use flags_m
   use params_m
   use matrix_m
   use linalg_m

   use f95_lapack

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Accessibility

   private

   public :: eigen_max
   public :: eigen_all

contains

   subroutine eigen_max(pa, fl, sig)

      type(params_t), intent(in) :: pa
      type(flags_t), intent(in)  :: fl
      real(RD), intent(out)      :: sig

      integer                  :: D_o
      integer                  :: D_e
      integer                  :: D
      complex(RD), allocatable :: sig_all(:)

      ! Calculate the maximal value of the real part of all eigenvalues

      if (fl%split) then
         call get_matrix_dim(pa%N, fl, D_e, parity=.TRUE.)
         call get_matrix_dim(pa%N, fl, D_o, parity=.FALSE.)
         D = D_e + D_o
      else
         call get_matrix_dim(pa%N, fl, D)
      end if

      allocate(sig_all(D))

      call eigen_all(pa, fl, sig_all)

      sig = MAXVAL(REAL(sig_all, RD))

   end subroutine eigen_max

   !****

   subroutine eigen_all(pa, fl, sig)

      type(params_t), intent(in) :: pa
      type(flags_t), intent(in)  :: fl
      complex(RD), intent(out)   :: sig(:)

      integer                  :: D_e
      integer                  :: D_o
      integer                  :: D
      real(RD), allocatable    :: A(:,:)
      real(RD)                 :: sig_shift
      integer, allocatable     :: ipiv(:)
      real(RD), allocatable    :: work(:)
      integer                  :: info
      complex(RD), allocatable :: sig_e(:)
      complex(RD), allocatable :: sig_o(:)

      ! Calculate all eigenvalues of the A matrix

      if (fl%split) then

         ! Even parity

         call get_matrix_dim(pa%N, fl, D_e, .TRUE.)

         allocate(A(D_e,D_e))
         allocate(ipiv(D_e))
         allocate(work(2*D_e))

         call eval_matrix(pa, fl, A, .TRUE.)

         if (fl%shift) then
            sig_shift = REAL(A(D_e,D_e), RD)
            A = A - sig_shift
         else
            sig_shift = 0._RD
         end if

         if (fl%invert) then
            call DGETRF(D_e, D_e, A, D_e, ipiv, info)
            call DGETRI(D_e, A, D_e, ipiv, work, SIZE(work), info)
         end if

         allocate(sig_e(D_e))

         call solve_eigen(A, sig_e)

         if (fl%invert) then
            sig_e = 1._RD/sig_e + sig_shift
         else
            sig_e = sig_e + sig_shift
         end if

         deallocate(ipiv)
         deallocate(work)
         deallocate(A)

         ! Odd parity
         
         call get_matrix_dim(pa%N, fl, D_o, .FALSE.)

         allocate(A(D_o,D_o))
         allocate(ipiv(D_o))
         allocate(work(2*D_o))

         call eval_matrix(pa, fl, A, .FALSE.)

         if (fl%shift) then
            sig_shift = REAL(A(D_o,D_o), RD)
            A = A - sig_shift
         else
            sig_shift = 0._RD
         end if

         if (fl%invert) then
            call DGETRF(D_o, D_o, A, D_o, ipiv, info)
            call DGETRI(D_o, A, D_o, ipiv, work, SIZE(work), info)
         end if

         allocate(sig_o(D_o))

         call solve_eigen(A, sig_o)

         if (fl%invert) then
            sig_o = 1._RD/sig_o + sig_shift
         else
            sig_o = sig_o + sig_shift
         end if

         ! Merge the two parities

         D = D_e + D_o

         @:CHECK_BOUNDS(SIZE(sig), D)

         sig(1::2) = sig_e
         sig(2::2) = sig_o

      else

         ! Full matrix

         call get_matrix_dim(pa%N, fl, D)

         allocate(A(D,D))
         allocate(ipiv(D))
         allocate(work(2*D))

         call eval_matrix(pa, fl, A)

         if (fl%shift) then
            sig_shift = REAL(A(D,D), RD)
            A = A - sig_shift
         else
            sig_shift = 0._RD
         end if

         if (fl%invert) then
            call DGETRF(D, D, A, D, ipiv, info)
            call DGETRI(D, A, D, ipiv, work, SIZE(work), info)
         end if

         @:CHECK_BOUNDS(SIZE(sig), D)

         call solve_eigen(A, sig)

         if (fl%invert) then
            sig = 1._RD/sig + sig_shift
         else
            sig = sig + sig_shift
         end if

      end if

      ! Finish

   end subroutine eigen_all

end module thermo_m
