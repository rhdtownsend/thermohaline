#:include 'forum.inc'

program thermo

   ! Uses

   use forum_m, split_ => split
   use params_m
   use matrix_m
   use finger_m

   use f95_lapack

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Variables

   character(:), allocatable :: nml_file

   integer                  :: unit
   character(16)            :: scan_var_name
   real(RD)                 :: scan_var_min
   real(RD)                 :: scan_var_max
   integer                  :: n_scan_var
   logical                  :: log_scan_var
   logical                  :: rescale_scan_var_min
   logical                  :: rescale_scan_var_max
   real(RD)                 :: R_0
   real(RD)                 :: Pr
   real(RD)                 :: tau
   real(RD)                 :: H_B
   real(RD)                 :: D_B
   real(RD)                 :: w_f
   real(RD)                 :: k_z
   integer                  :: N
   logical                  :: split
   logical                  :: use_mesa
   logical                  :: partition
   character(256)           :: out_file
   real(RD)                 :: lam_f
   real(RD)                 :: l_f
   real(RD)                 :: k_z_min
   real(RD)                 :: k_z_max
   real(RD)                 :: w_f_min
   real(RD)                 :: w_f_max
   real(RD), allocatable    :: scan_var(:)
   type(params_t)           :: pa
   integer                  :: i
   complex(RD), allocatable :: sig(:,:)
   complex(RD), allocatable :: sig_2nd(:,:)
   type(hdf5io_t)           :: hi

   namelist /params/ &
      scan_var_name, scan_var_min, scan_var_max, n_scan_var, log_scan_var, &
      rescale_scan_var_min, rescale_scan_var_max, &
      R_0, Pr, tau, H_B, D_B, w_f, k_z, &
      N, split, use_mesa, partition, &
      out_file

   ! Read arguments

   @:ASSERT(n_arg() == 1,'Syntax: thermo nml_file')

   call get_arg(1, nml_file)

   ! Read namelist parameters

   scan_var_name = 'k_z'
   scan_var_min = 1e-1
   scan_var_max = 1.
   log_scan_var = .FALSE.
   rescale_scan_var_min = .FALSE.
   rescale_scan_var_max = .FALSE.

   R_0 = 1.
   Pr = 1.
   tau = 1.
   Pr = 1.
   
   H_B = 1.
   D_B = 1.
   w_f = 1.
   k_z = 1.

   split = .FALSE.
   use_mesa = .FALSE.
   partition = .FALSE.

   open(NEWUNIT=unit, STATUS='OLD', FILE=nml_file)
   read(unit, NML=params)
   close(unit)

   print *,'R_0   :', R_0
   print *,'Pr    :', Pr
   print *,'tau   :', tau
   print *,'H_B   :', H_B
   print *,'D_B   :', D_B
   print *,'w_f   :', w_f
   print *,'k_z   :', k_z

   ! Solve for fingering-instability parameters

   call solve_finger(R_0, Pr, tau, lam_f, l_f)

   print *,'lam_f :', lam_f
   print *,'l_f   :', l_f

   ! Calculate scan ranges

   select case(scan_var_name)
   case('k_z')

      k_z_min = scan_var_min
      k_z_max = scan_var_max

      if (rescale_scan_var_min) k_z_min = k_z_min*l_f
      if (rescale_scan_var_max) k_z_max = k_z_max*l_f

   case('w_f')

      w_f_min = scan_var_min
      w_f_max = scan_var_max

   case default

      @:ABORT('invalid scan_var_name')

   end select

   ! Loop over the scan variable

   allocate(scan_var(n_scan_var))

   allocate(sig(4*(2*N+1), n_scan_var))
   allocate(sig_2nd(4*(2*N+1), n_scan_var))

   !$OMP PARALLEL DO PRIVATE(pa)
   do i = 1, n_scan_var

      ! Set up parameters

      select case(scan_var_name)
      case('k_z')

         if (log_scan_var) then
            scan_var(i) = 10**((LOG10(k_z_min)*(n_scan_var-i) + LOG10(k_z_max)*(i-1))/(n_scan_var - 1))
         else
            scan_var(i) = (k_z_min*(n_scan_var-i) + k_z_max*(i-1))/(n_scan_var - 1)
         endif

         pa = params_t(R_0, Pr, tau, H_B, D_B, w_f, scan_var(i))

      case('w_f')
      
         if (log_scan_var) then
            scan_var(i) = 10**((LOG10(w_f_min)*(n_scan_var-i) + LOG10(w_f_max)*(i-1))/(n_scan_var - 1))
         else
            scan_var(i) = (w_f_min*(n_scan_var-i) + w_f_max*(i-1))/(n_scan_var - 1)
         endif

         pa = params_t(R_0, Pr, tau, H_B, D_B, scan_var(i), k_z)

      end select

      ! Evaluate the full set of eigenvalues

      call eigen_all(N, pa, split, sig(:,i))
      call eigen_2nd_order(N, pa, sig_2nd(:,i), partition)

   end do

   ! Write out results

   hi = hdf5io_t(out_file, CREATE_FILE)

   call hi%write_attr('R_0', R_0)
   call hi%write_attr('Pr', Pr)
   call hi%write_attr('tau', tau)
   call hi%write_attr('H_B', H_B)
   call hi%write_attr('D_B', D_B)

   if (scan_var_name /= 'k_z') call hi%write_attr('k_z', k_z)
   if (scan_var_name /= 'w_f') call hi%write_attr('w_f', w_f)

   call hi%write_attr('lam_f', lam_f)
   call hi%write_attr('l_f', l_f)

   call hi%write_dset(scan_var_name, scan_var)
   call hi%write_dset('sig', sig)
   call hi%write_dset('sig_2nd', sig_2nd)

   call hi%final()

   ! Finished

contains

   subroutine eigen_all(N, pa, split, sig, use_mesa)

      integer, intent(in)            :: N
      type(params_t), intent(in)     :: pa
      logical, intent(in)            :: split
      complex(RD), intent(out)       :: sig(:)
      logical, intent(in), optional  :: use_mesa

      real(RD), allocatable :: A(:,:)
      real(RD), allocatable :: wr(:)
      real(RD), allocatable :: wi(:)

      if (split) then

         allocate(A(2*(2*N+1),2*(2*N+1)))
         allocate(wr(2*(2*N+1)))
         allocate(wi(2*(2*N+1)))

         call eval_matrix(N, pa, A, parity=.TRUE., use_mesa=use_mesa)
         call LA_GEEV(A, wr, wi)
         sig(1::2) = CMPLX(wr, wi, KIND=RD)
         
         call eval_matrix(N, pa, A, parity=.FALSE., use_mesa=use_mesa)
         call LA_GEEV(A, wr, wi)
         sig(2::2) = CMPLX(wr, wi, KIND=RD)

      else

         allocate(A(4*(2*N+1),4*(2*N+1)))
         allocate(wr(4*(2*N+1)))
         allocate(wi(4*(2*N+1)))

         call eval_matrix(N, pa, A, use_mesa=use_mesa)
         call LA_GEEV(A, wr, wi)
         sig = CMPLX(wr, wi, KIND=RD)
         
      end if

   end subroutine eigen_all

   !****

   subroutine eigen_2nd_order(N, pa, sig, partition, use_mesa)

      integer, intent(in)           :: N
      type(params_t), intent(in)    :: pa
      complex(RD), intent(out)      :: sig(:)
      logical, intent(in), optional :: partition
      logical, intent(in), optional :: use_mesa

      real(RD)       :: A(2*(2*N+1),2*(2*N+1))
      type(params_t) :: pa_

      pa_ = params_t(pa%R_0, pa%Pr, pa%tau, pa%H_B, pa%D_B, 1._RD, pa%k_z)

      call eval_matrix(N, pa_, A, parity=.TRUE., use_mesa=use_mesa)
      call pert_expand(N, pa%w_f, A, sig(1::2), partition=partition)

      call eval_matrix(N, pa_, A, parity=.FALSE., use_mesa=use_mesa)
      call pert_expand(N, pa%w_f, A, sig(2::2), partition=partition)

   end subroutine eigen_2nd_order

   !****

   subroutine pert_expand(N, w_f, A, sig, partition)

      integer, intent(in)           :: N
      real(RD), intent(in)          :: w_f
      real(RD), intent(in)          :: A(:,:)
      complex(RD), intent(out)      :: sig(:)
      logical, intent(in), optional :: partition

      logical     :: partition_
      real(RD)    :: A_0(2*(2*N+1),2*(2*N+1))
      real(RD)    :: A_1(2*(2*N+1),2*(2*N+1))
      integer     :: i
      integer     :: k
      integer     :: m
      complex(RD) :: XL(2*(2*N+1),2*(2*N+1))
      complex(RD) :: XR(2*(2*N+1),2*(2*N+1))
      complex(RD) :: V(2*(2*N+1),2*(2*N+1))
      complex(RD) :: dsig(2*(2*N+1))

      @:CHECK_BOUNDS(SIZE(A, 1), 2*(2*N+1))
      @:CHECK_BOUNDS(SIZE(A, 2), 2*(2*N+1))

      @:CHECK_BOUNDS(SIZE(sig), 2*(2*N+1))

      if (PRESENT(partition)) then
         partition_ = partition
      else
         partition_ = .FALSE.
      end if
      
      ! Isolate the zeroth and first-order parts of the matrices

      A_0 = 0._RD

      A_0(1:2,1:2) = A(1:2,1:2)

      i = 3

      do m = 1, N
         A_0(i:i+3,i:i+3) = A(i:i+3,i:i+3)
         i = i + 4
      end do

      A_1 = A - A_0

      ! Calculate eigenvalues and eigenvectors of the zeroth-order matrix

      if (partition_) then

         XL = 0._RD
         XR = 0._RD

         ! Handle the first 2x2 block

         call solve_eigen(2, A_0(1:2,1:2), sig(1:2), XL(1:2,1:2), XR(1:2,1:2))

         ! Handle the other blocks

         i = 3

         do m = 1, N
            call solve_eigen(4, A_0(i:i+3,i:i+3), sig(i:i+3), XL(i:i+3,i:i+3), XR(i:i+3,i:i+3))
            i = i + 4
         end do

      else

         call solve_eigen(2*(2*N+1), A_0, sig, XL, XR)

      end if

      ! Calculate the overlap matrix

      V = MATMUL(TRANSPOSE(CONJG(XL)), MATMUL(A_1, XR))

      ! Evaluate the second-order corrections to w

      dsig = 0._RD

      row_loop: do i = 1, 2*(2*N+1)
         col_loop: do k = 1, 2*(2*N+1)
            if (i == k) then
               cycle col_loop
            end if
            dsig(i) = dsig(i) + V(i,k)*V(k,i)/(sig(i) - sig(k))
         end do col_loop
      end do row_loop

      ! Apply the corrections

      sig = sig + w_f**2*dsig

   end subroutine pert_expand

   !****

   subroutine solve_eigen(n, A, sig, XL, XR)

      integer, intent(in)      :: n
      real(RD), intent(in)     :: A(:,:)
      complex(RD), intent(out) :: sig(:)
      complex(RD), intent(out) :: XL(:,:)
      complex(RD), intent(out) :: XR(:,:)

      real(RD) :: A_tmp(n,n)
      real(RD) :: sig_re(n)
      real(RD) :: sig_im(n)
      real(RD) :: XL_reim(n,n)
      real(RD) :: XR_reim(n,n)
      integer  :: i

      @:CHECK_BOUNDS(SIZE(A, 1), n)
      @:CHECK_BOUNDS(SIZE(A, 2), n)

      @:CHECK_BOUNDS(SIZE(sig), n)
      
      @:CHECK_BOUNDS(SIZE(XL, 1), n)
      @:CHECK_BOUNDS(SIZE(XL, 2), n)
      
      @:CHECK_BOUNDS(SIZE(XR, 1), n)
      @:CHECK_BOUNDS(SIZE(XR, 2), n)
      
      ! Solve the eigenproblem to find eigenvalues and left/right
      ! eigenvectors (stored as column vectors in the XL/XR matrices,
      ! respectively)

      A_tmp = A

      call LA_GEEV(A_tmp, sig_re, sig_im, XL_reim, XR_reim)

      sig = CMPLX(sig_re, sig_im, KIND=RD)

      XL(:,1::2) = CMPLX(XL_reim(:,1::2),  XL_reim(:,2::2), KIND=RD)
      XL(:,2::2) = CMPLX(XL_reim(:,1::2), -XL_reim(:,2::2), KIND=RD)

      XR(:,1::2) = CMPLX(XR_reim(:,1::2),  XR_reim(:,2::2), KIND=RD)
      XR(:,2::2) = CMPLX(XR_reim(:,1::2), -XR_reim(:,2::2), KIND=RD)

      ! Rescale left eigenvectors so left-right pairs have a dot produce of unity

      do i = 1, n
         XL(:,i) = XL(:,i)/DOT_PRODUCT(XL(:,i), XR(:,i))
      end do

      ! Check that XL and XR^T are (almost) inverses

      !associate (P => MATMUL(TRANSPOSE(CONJG(XL)), XR))
      !   print *,'range:', MINVAL(REAL(P)), MAXVAL(REAL(P)), MINVAL(AIMAG(P)), MAXVAL(AIMAG(P))
      !end associate

   end subroutine solve_eigen

   ! !****

   ! subroutine eigen_max(N, pa, sig_max)

   !    integer, intent(in)        :: N
   !    type(params_t), intent(in) :: pa
   !    complex(RD), intent(out)   :: sig_max

   !    integer, parameter  :: NEV = 1
   !    integer, parameter  :: NCV = 2*NEV + 1
   !    integer, parameter  :: LWORKL = 3*NCV**2 + 6*NCV
   !    real(RD), parameter :: TOL = 1E-6_RD

   !    integer  :: ido
   !    integer  :: iparam(11)
   !    integer  :: ipntr(14)
   !    real(RD) :: resid(4*(2*N+1))
   !    real(RD) :: v(4*(2*N+1),NCV)
   !    real(RD) :: workd(3*4*(2*N+1))
   !    real(RD) :: workl(LWORKL)
   !    integer  :: info
   !    real(RD) :: dr(NEV+1)
   !    real(RD) :: di(NEV+1)
   !    real(RD) :: z(4*(2*N+1),NEV+1)
   !    real(RD) :: workev(3*NCV)
   !    logical  :: select(NCV)
   !    integer  :: ierr

   !    ! Find the maximal eigenvalue

   !    ! First set up parameters

   !    iparam = 0

   !    iparam(1) = 1
   !    iparam(3) = 300
   !    iparam(7) = 1

   !    ido = 0
   !    info = 0

   !    iter_loop : do

   !       call DNAUPD(ido, 'I', 4*(2*N+1), 'LR', NEV, TOL, resid, &
   !          NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, LWORKL, &
   !          info)

   !       if (ido == -1 .OR. ido == 1) then

   !          associate( &
   !             x => workd(ipntr(1):ipntr(1)+4*(2*N+1)-1), &
   !             y => workd(ipntr(2):ipntr(2)+4*(2*N+1)-1))

   !             call eval_prod(N, pa, x, y)

   !          end associate

   !       else

   !          exit iter_loop

   !       end if

   !    end do iter_loop

   !    ! Check for convergence

   !    if (info < 0) then

   !       print *, ' '
   !       print *, ' Error with _naupd, info = ', info
   !       print *, ' Check the documentation of _naupd'
   !       print *, ' '
   !       stop

   !    else

   !       call DNEUPD(.FALSE., 'A', select, dr, di, z, SIZE(z, 1), &
   !          0._RD, 0._RD, workev, 'I', 4*(2*N+1), 'LR', NEV, TOL, &
   !          resid, NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, &
   !          LWORKL, ierr)

   !       if (ierr /= 0) then

   !          print *, ' '
   !          print *, ' Error with _neupd, info = ', ierr
   !          print *, ' Check the documentation of _neupd. '
   !          print *, ' '
   !          stop

   !       end if
         
   !    endif

   !    ! Store the eigenvalue

   !    sig_max = CMPLX(dr(1), di(1), KIND=RD)

   !    print *,sig_max

   ! end subroutine eigen_max

   ! !****

   ! subroutine eigen_close(N, pa, sig_shift, sig_close)
      
   !    integer, intent(in)        :: N
   !    type(params_t), intent(in) :: pa
   !    complex(RD), intent(in)    :: sig_shift
   !    complex(RD), intent(out)   :: sig_close

   !    integer, parameter  :: NEV = 1
   !    integer, parameter  :: NCV = 2*NEV + 1
   !    integer, parameter  :: LWORKL = 3*NCV**2 + 6*NCV
   !    real(RD), parameter :: TOL = 1E-6_RD

   !    integer  :: ido
   !    integer  :: iparam(11)
   !    integer  :: ipntr(14)
   !    real(RD) :: resid(4*(2*N+1))
   !    real(RD) :: v(4*(2*N+1),NCV)
   !    real(RD) :: workd(3*4*(2*N+1))
   !    real(RD) :: workl(LWORKL)
   !    integer  :: info
   !    real(RD) :: dr(NEV+1)
   !    real(RD) :: di(NEV+1)
   !    real(RD) :: z(4*(2*N+1),NEV+1)
   !    real(RD) :: workev(3*NCV)
   !    logical  :: select(NCV)
   !    integer  :: ierr

   !    ! Find the maximal eigenvalue

   !    ! First set up parameters

   !    iparam = 0

   !    iparam(1) = 1
   !    iparam(3) = 300
   !    iparam(7) = 1

   !    ido = 0
   !    info = 0

   !    iter_loop : do

   !       call DNAUPD(ido, 'I', 4*(2*N+1), 'SR', NEV, TOL, resid, &
   !          NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, LWORKL, &
   !          info)

   !       if (ido == -1 .OR. ido == 1) then

   !          associate( &
   !             x => workd(ipntr(1):ipntr(1)+4*(2*N+1)-1), &
   !             y => workd(ipntr(2):ipntr(2)+4*(2*N+1)-1))

   !             call eval_prod(N, pa, x, y)

   !          end associate

   !       else

   !          exit iter_loop

   !       end if

   !    end do iter_loop

   !    ! Check for convergence

   !    if (info < 0) then

   !       print *, ' '
   !       print *, ' Error with _naupd, info = ', info
   !       print *, ' Check the documentation of _naupd'
   !       print *, ' '
   !       stop

   !    else

   !       call DNEUPD(.FALSE., 'A', select, dr, di, z, SIZE(z, 1), &
   !          0._RD, 0._RD, workev, 'I', 4*(2*N+1), 'LM', NEV, TOL, &
   !          resid, NCV, v, SIZE(v, 1), iparam, ipntr, workd, workl, &
   !          LWORKL, ierr)

   !       if (ierr /= 0) then

   !          print *, ' '
   !          print *, ' Error with _neupd, info = ', ierr
   !          print *, ' Check the documentation of _neupd. '
   !          print *, ' '
   !          stop

   !       end if
         
   !    endif

   !    ! Store the eigenvalue

   !    sig_close = CMPLX(dr(1), di(1), KIND=RD)

   !    print *,sig_close

   ! end subroutine eigen_close

end program thermo
