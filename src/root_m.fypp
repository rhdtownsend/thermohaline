! Module  : root_m
! Purpose : root / extremum finding routines for monovariate functions
 
#:include 'forum.inc'

module root_m

   ! Uses
   
   use forum_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   private

   public :: expand_root_bracket
   public :: narrow_root_bracket
   public :: find_root
   public :: find_extremum

   ! Procedures

contains

   subroutine expand_root_bracket(func, x_a, x_b, f_x_a, f_x_b, clamp_a, clamp_b)

      interface
         function func(x)
            use forum_m
            real(RD), intent(in) :: x
            real(RD)             :: func
         end function func
      end interface
      real(RD), intent(inout)         :: x_a
      real(RD), intent(inout)         :: x_b
      real(RD), intent(out), optional :: f_x_a
      real(RD), intent(out), optional :: f_x_b
      logical, intent(in), optional   :: clamp_a
      logical, intent(in), optional   :: clamp_b

      real(RD), parameter :: EXPAND_FACTOR = 1.6_RD

      logical  :: clamp_a_
      logical  :: clamp_b_
      real(RD) :: f_a
      real(RD) :: f_b
      logical  :: move_a

      if(PRESENT(clamp_a)) then
         clamp_a_ = clamp_a
      else
         clamp_a_ = .FALSE.
      endif

      if(PRESENT(clamp_b)) then
         clamp_b_ = clamp_b
      else
         clamp_b_ = .FALSE.
      endif

      @:ASSERT(.NOT. (clamp_a_ .AND. clamp_b_), 'cannot clamp both points')
      @:ASSERT(x_a /= x_b, 'invalid initial bracket')

      ! Expand the bracket [x_a,x_b] until it contains a root of the
      ! function func(x)

      f_a = func(x_a)
      f_b = func(x_b)

      expand_loop : do

         if((f_a > 0._RD .AND. f_b < 0._RD) .OR. &
            (f_a < 0._RD .AND. f_b > 0._RD)) exit expand_loop

         if(clamp_a_) then
            move_a = .FALSE.
         elseif(clamp_b_) then
            move_a = .TRUE.
         else
            move_a = ABS(f_b) > ABS(f_a)
         endif

         if(move_a) then
            x_a = x_a + EXPAND_FACTOR*(x_a - x_b)
            f_a = func(x_a)
         else
            x_b = x_b + EXPAND_FACTOR*(x_b - x_a)
            f_b = func(x_b)
         endif

      end do expand_loop

      ! Store f_a and f_b

      if(PRESENT(f_x_a)) f_x_a = f_a
      if(PRESENT(f_x_b)) f_x_b = f_b

      ! Finish

      return

   end subroutine expand_root_bracket

   !****

   subroutine narrow_root_bracket(func, x_a, x_b, x_tol, f_x_a, f_x_b, n_iter, relative_tol)

      interface
         function func(x)
            use forum_m
            real(RD), intent(in) :: x
            real(RD)             :: func
         end function func
      end interface
      real(RD), intent(inout)           :: x_a
      real(RD), intent(inout)           :: x_b
      real(RD), intent(in)              :: x_tol
      real(RD), optional, intent(inout) :: f_x_a
      real(RD), optional, intent(inout) :: f_x_b
      integer, optional, intent(inout)  :: n_iter
      logical, optional, intent(in)     :: relative_tol

      real(RD), parameter :: EPS = EPSILON(0._RD)

      integer  :: n_iter_
      logical  :: relative_tol_
      real(RD) :: a
      real(RD) :: b
      real(RD) :: c
      real(RD) :: d
      real(RD) :: e
      real(RD) :: f_a
      real(RD) :: f_b
      real(RD) :: f_c
      real(RD) :: tol
      real(RD) :: m
      real(RD) :: p
      real(RD) :: q
      real(RD) :: r
      real(RD) :: s
      integer  :: i

      if(PRESENT(n_iter)) then
         n_iter_ = n_iter
      else
         n_iter_ = 50
      end if

      if(PRESENT(relative_tol)) then
         relative_tol_ = relative_tol
      else
         relative_tol_ = .FALSE.
      endif

      ! Use Brent's method [based on the ALGOL 60 routine 'zero'
      ! published in Brent (1973, "Algorithms for Minimization without
      ! Derivatives", Prentice Hall, Englewood Cliffs] to narrow the
      ! bracket [x_a,x_b] bracket on the function func(x)

      ! Set up the initial state

      a = x_a
      b = x_b

      if(PRESENT(f_x_a)) then
         f_a = f_x_a
      else
         f_a = func(a)
      endif

      if(PRESENT(f_x_b)) then
         f_b = f_x_b
      else
         f_b = func(b)
      endif

      c = b
      f_c = f_b

      ! Check that a root does indeed lie within the bracket

      @:ASSERT((f_a >= 0._RD .AND. f_b <= 0._RD) .OR. (f_a <= 0._RD .AND. f_b >= 0._RD), 'root is not bracketed')

      ! Iterate until the correction drops below the threshold, or the
      ! maximum number of iterations is exceeded

      iterate_loop : do i = 1,n_iter_

         ! Reorder c so that it has the opposite sign to b

         if(f_b > 0. .EQV. f_c > 0.) then
            c = a
            f_c = f_a
            d = b - a
            e = d
         endif

         ! Make sure that the function is smallest in magnitude
         ! at b

         if(ABS(f_c) < ABS(f_b)) then
            a = b
            b = c
            c = a
            f_a = f_b
            f_b = f_c
            f_c = f_a
         endif

         if(relative_tol_) then
            tol = (2.*EPS + x_tol)*ABS(b)
         else
            tol = 2.*EPS*ABS(b) + x_tol
         endif

         m = 0.5*(c - b)

         ! Check for convergence

         if(ABS(m) <= tol .OR. f_b == 0.) exit iterate_loop

         ! See if bisection is forced

         if(ABS(e) <  tol .OR. ABS(f_a) < ABS(f_b)) then

            d = m
            e = d

         else

            s = f_b/f_a

            if(a == c) then

               ! Linear interpolation

               p = 2.*m*s
               q = 1. - s

            else

               ! Inverse quadratic interpolation

               q = f_a/f_c
               r = f_b/f_c

               p = s*(2.*m*q*(q - r) - (b - a)*(r - 1.))
               q = (q - 1.)*(r - 1.)*(s - 1.)

            endif

            if(p > 0.) then
               q = -q
            else
               p = -p
            endif

            s = e
            e = d

            if(2.*p < 3.*m*q - ABS(tol*q) .AND. p < ABS(0.5*s*q)) then
               d = p/q
            else
               d = m
               e = d
            endif

         endif

         ! Store the old value of b in a

         a = b
         f_a = f_b

         ! Update b

         b = b + MERGE(d, MERGE(tol, -tol, m > 0), ABS(d) > tol)

         f_b = func(b)

      end do iterate_loop

      if(PRESENT(n_iter)) then
         n_iter = i
      else
         @:ASSERT(i <= n_iter_, 'too many iterations')
      endif

      ! Store the results

      x_a = a
      x_b = b

      if(PRESENT(f_x_a)) f_x_a = f_a
      if(PRESENT(f_x_b)) f_x_b = f_b

      ! Finish

      return

   end subroutine narrow_root_bracket

   !****

   subroutine find_root(func, x_a, x_b, x_tol, x, f_x_a, f_x_b, n_iter, relative_tol)

      interface
         function func(x)
            use forum_m
            real(RD), intent(in) :: x
            real(RD)             :: func
         end function func
      end interface
      real(RD), intent(in)             :: x_a
      real(RD), intent(in)             :: x_b
      real(RD), intent(in)             :: x_tol
      real(RD), intent(out)            :: x
      real(RD), optional, intent(in)   :: f_x_a
      real(RD), optional, intent(in)   :: f_x_b
      integer, optional, intent(inout) :: n_iter
      logical, optional, intent(in)    :: relative_tol

      real(RD) :: a
      real(RD) :: b
      real(RD) :: f_a
      real(RD) :: f_b

      ! Find a root of the function func(x)

      a = x_a
      b = x_b

      if(PRESENT(f_x_a)) then
         f_a = f_x_a
      else
         f_a = func(a)
      endif

      if(PRESENT(f_x_b)) then
         f_b = f_x_b
      else
         f_b = func(b)
      endif

      call narrow_root_bracket(func, a, b, x_tol, f_a, f_b, n_iter, relative_tol)

      x = b

      ! Finish

      return

   end subroutine find_root

   !****

   subroutine find_extremum(func, x_a, x_b, x_c, x_tol, minimum, x, relative_tol)

      interface
         function func(x)
            use forum_m
            real(RD), intent(in) :: x
            real(RD)             :: func
         end function func
      end interface
      real(RD), intent(in)          :: x_a
      real(RD), intent(in)          :: x_b
      real(RD), intent(in)          :: x_c
      real(RD), intent(in)          :: x_tol
      logical, intent(in)           :: minimum
      real(RD), intent(out)         :: x
      logical, intent(in), optional :: relative_tol

      real(RD), parameter :: EPS = EPSILON(0._RD)
      real(RD), parameter :: R = 0.61803399_RD
      real(RD), parameter :: C = 1._RD - R

      logical  :: relative_tol_
      real(RD) :: x_0
      real(RD) :: x_1
      real(RD) :: x_2
      real(RD) :: x_3
      real(RD) :: f_1
      real(RD) :: f_2
      real(RD) :: tol

      if(PRESENT(relative_tol)) then
         relative_tol_ = relative_tol
      else
         relative_tol_ = .FALSE.
      endif

      ! Use a golden section search to find a local extremum of the
      ! function func(x)

      ! Set up the starting locations

      x_0 = x_a
      x_3 = x_c

      if(ABS(x_c-x_b) > ABS(x_b-x_a)) then
         x_1 = x_b
         x_2 = x_b + C*(x_c-x_b)
      else
         x_2 = x_b
         x_1 = x_b - C*(x_b-x_a)
      end if

      ! Iterate until convergence

      f_1 = func(x_1)*MERGE(1._RD, -1._RD, minimum)
      f_2 = func(x_2)*MERGE(1._RD, -1._RD, minimum)

      iterate_loop : do

         ! Check for a converged bracket

         if(relative_tol_) then
            tol = (SQRT(EPS) + 0.5_RD*x_tol)*(ABS(x_1) + ABS(x_2))
         else
            tol = SQRT(EPS)*(ABS(x_1) + ABS(x_2)) + x_tol
         endif

         if (ABS(x_3-x_0) <= tol) exit iterate_loop

         ! Update the bracket

         if (f_2 < f_1) then
            call shft3_(x_0, x_1, x_2, R*x_2+C*x_3)
            call shft2_(f_1, f_2, func(x_2)*MERGE(1._RD, -1._RD, minimum))
         else
            call shft3_(x_3, x_2, x_1, R*x_1+C*x_0)
            call shft2_(f_2, f_1, func(x_1)*MERGE(1._RD, -1._RD, minimum))
         end if

      end do iterate_loop

      ! Select the lower point

      if (f_1 < f_2) then
         x = x_1
      else
         x = x_2
      endif

      ! Finish

      return

   contains

      subroutine shft2_ (a, b, c)

         real(RD), intent(out)   :: a
         real(RD), intent(inout) :: b
         real(RD), intent(in)    :: c

         ! Shift b to a and c to b

         a=b
         b=c

         ! Finish

         return

      end subroutine shft2_

      subroutine shft3_ (a, b, c, d)

         real(RD), intent(out)   :: a 
         real(RD), intent(inout) :: b 
         real(RD), intent(inout) :: c
         real(RD), intent(in)    :: d

         ! Shift b to a, c to b and d to c

         a=b
         b=c
         c=d

      end subroutine shft3_

   end subroutine find_extremum

end module root_m
