#:include 'forum.inc'

module matrix_m

   ! Uses

   use forum_m
   use params_m

   use parasite_model_matrices

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   private

   public :: eval_matrix
!   public :: eval_prod

contains

   subroutine eval_block_m(N, m, pa, B)

      integer, intent(in)           :: N
      integer, intent(in)           :: m
      type(params_t), intent(in)    :: pa
      real(RD), intent(out)         :: B(:,:)

      real(RD) :: k2_m

      @:CHECK_BOUNDS(SIZE(B, 1),4)
      @:CHECK_BOUNDS(SIZE(B, 2),4)

      @:ASSERT_DEBUG(m >= -N .AND. M <= N,'invalid m')

      ! Evaluate the (m,m) 4x4 block of the full system matrix

      associate( &
         Pr => pa%Pr,       &
         R_0 => pa%R_0,     &
         tau => pa%tau,     &
         k_z => pa%k_z,     &
         H_B => pa%H_B,     &
         D_B => pa%D_B,     &
         lam_f => pa%lam_f, &
         l_f => pa%l_f,     &
         E_psi => pa%E_psi, &
         E_T => pa%E_T,     &
         E_C => pa%E_C)

         k2_m = m**2*l_f**2 + k_z**2

         if (m /= 0) then

            B(1,1) = -Pr*k2_m
            B(1,2) =  Pr*m*l_f/k2_m
            B(1,3) = -Pr*m*l_f/k2_m
            B(1,4) = -H_B*k_z

            B(2,1) = -m*l_f
            B(2,2) = -k2_m
            B(2,3) = 0
            B(2,4) = 0

            B(3,1) = -m*l_f/R_0
            B(3,2) = 0
            B(3,3) = -tau*k2_m
            B(3,4) = 0

            B(4,1) = k_z
            B(4,2) = 0
            B(4,3) = 0
            B(4,4) = -D_B*k2_m

         else

            B(1,1) = -Pr*k2_m
            B(1,2) = 0
            B(1,3) = 0
            B(1,4) = -H_B*k_z

            B(2,1) = 0
            B(2,2) = -k2_m
            B(2,3) = 0
            B(2,4) = 0

            B(3,1) = 0
            B(3,2) = 0
            B(3,3) = -tau*k2_m
            B(3,4) = 0

            B(4,1) = k_z
            B(4,2) = 0
            B(4,3) = 0
            B(4,4) = -D_B*k2_m

         end if

      end associate

   end subroutine eval_block_m

   !****

   subroutine eval_block_mm1(N, m, pa, B)

      integer, intent(in)           :: N
      integer, intent(in)           :: m
      type(params_t), intent(in)    :: pa
      real(RD), intent(out)         :: B(:,:)

      real(RD) :: k2_m
      real(RD) :: k2_m_m

      @:CHECK_BOUNDS(SIZE(B, 1),4)
      @:CHECK_BOUNDS(SIZE(B, 2),4)

      @:ASSERT_DEBUG(m >= -N .AND. m <= N,'invalid m')

      ! Evaluate the (m,m-1) 4x4 block of the full system matrix

      associate( &
         Pr => pa%Pr,       &
         R_0 => pa%R_0,       &
         tau => pa%tau,     &
         k_z => pa%k_z,     &
         H_B => pa%H_B,     &
         D_B => pa%D_B,     &
         lam_f => pa%lam_f, &
         l_f => pa%l_f,     &
         E_psi => pa%E_psi, &
         E_T => pa%E_T,     &
         E_C => pa%E_C)

         k2_m = m**2*l_f**2 + k_z**2
         k2_m_m = (m-1)**2*l_f**2 + k_z**2

         if (E_psi /= 0._RD) then

            B(1,1) = l_f*k_z*E_psi/k2_m*(l_f**2 - k2_m_m)
            B(1,2) = 0
            B(1,3) = 0
            B(1,4) = 0

            B(2,1) = l_f*k_z*E_T
            B(2,2) = -l_f*k_z*E_psi
            B(2,3) = 0
            B(2,4) = 0

            B(3,1) = l_f*k_z*E_C
            B(3,2) = 0
            B(3,3) = -l_f*k_z*E_psi
            B(3,4) = 0

            B(4,1) = 0
            B(4,2) = 0
            B(4,3) = 0
            B(4,4) = -l_f*k_z*E_psi

         else

            B = 0

         end if

      end associate

   end subroutine eval_block_mm1

   !****

   subroutine eval_block_mp1(N, m, pa, B)

      integer, intent(in)           :: N
      integer, intent(in)           :: m
      type(params_t), intent(in)    :: pa
      real(RD), intent(out)         :: B(:,:)

      real(RD) :: k2_m
      real(RD) :: k2_m_p
      
      @:CHECK_BOUNDS(SIZE(B, 1),4)
      @:CHECK_BOUNDS(SIZE(B, 2),4)

      @:ASSERT_DEBUG(m >= -N .AND. m <= N,'invalid m')

      ! Evaluate the (m,m+1) 4x4 block of the full system matrix

      associate( &
         Pr => pa%Pr,       &
         R_0 => pa%R_0,       &
         tau => pa%tau,     &
         k_z => pa%k_z,     &
         H_B => pa%H_B,     &
         D_B => pa%D_B,     &
         lam_f => pa%lam_f, &
         l_f => pa%l_f,     &
         E_psi => pa%E_psi, &
         E_T => pa%E_T,     &
         E_C => pa%E_C)

         k2_m = m**2*l_f**2 + k_z**2
         k2_m_p = (m+1)**2*l_f**2 + k_z**2

         if (E_psi /= 0._RD) then

            B(1,1) = -l_f*k_z*E_psi/k2_m*(l_f**2 - k2_m_p)
            B(1,2) = 0
            B(1,3) = 0
            B(1,4) = 0

            B(2,1) = l_f*k_z*E_T
            B(2,2) = l_f*k_z*E_psi
            B(2,3) = 0
            B(2,4) = 0

            B(3,1) = l_f*k_z*E_C
            B(3,2) = 0
            B(3,3) = l_f*k_z*E_psi
            B(3,4) = 0

            B(4,1) = 0
            B(4,2) = 0
            B(4,3) = 0
            B(4,4) = l_f*k_z*E_psi

         else

            B = 0

         end if

      end associate

   end subroutine eval_block_mp1

   !****

   subroutine eval_matrix(N, pa, A, parity, pre_fac, use_mesa)

      integer, intent(in)            :: N
      type(params_t), intent(in)     :: pa
      real(RD), intent(out)          :: A(:,:)
      logical, intent(in), optional  :: parity
      real(RD), intent(in), optional :: pre_fac
      logical, intent(in), optional  :: use_mesa

      logical               :: use_mesa_
      real(RD), allocatable :: L(:,:)

      if (PRESENT(use_mesa)) then
         use_mesa_ = use_mesa
      else
         use_mesa_ = .FALSE.
      end if
     
      ! Evaluate the system matrix A

      if (use_mesa_) then
         if (PRESENT(parity)) then
            if (parity) then
               call build_parasite_matrix(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, pa%lam_f, pa%l_f, N, L, 'EVEN')
            else
               call build_parasite_matrix(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, pa%lam_f, pa%l_f, N, L, 'ODD')
            end if
         else
            call build_parasite_matrix(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, pa%lam_f, pa%l_f, N, L)
         end if
         A = L
      else
         if (PRESENT(parity)) then
            call eval_matrix_split(N, pa, A, parity, pre_fac)
         else
            call eval_matrix_full(N, pa, A, pre_fac)
         end if
      end if

   end subroutine eval_matrix

   !****

   subroutine eval_matrix_full(N, pa, A, pre_fac)

      integer, intent(in)            :: N
      type(params_t), intent(in)     :: pa
      real(RD), intent(out)          :: A(:,:)
      real(RD), intent(in), optional :: pre_fac

      integer :: m
      integer :: k

      @:CHECK_BOUNDS(SIZE(A, 1),4*(2*N+1))
      @:CHECK_BOUNDS(SIZE(A, 2),4*(2*N+1))

      ! Evaluate the full system matrix A

      A = 0

      k = 1

      blockloop: do m = -N, N

         call eval_block_m(N, m, pa, A(k:k+3,k:k+3))

         if(m > -N) then
            call eval_block_mm1(N, m, pa, A(k:k+3,k-4:k-1))
         endif
            
         if(m < N) then
            call eval_block_mp1(N, m, pa, A(k:k+3,k+4:k+7))
         end if

         k = k + 4

      end do blockloop

      ! If necessary, apply the preconditioning factor

      if (PRESENT(pre_fac)) A = A*pre_fac

   end subroutine eval_matrix_full

   !****

   subroutine eval_matrix_split(N, pa, A, parity, pre_fac)

      integer, intent(in)            :: N
      type(params_t), intent(in)     :: pa
      real(RD), intent(out)          :: A(:,:)
      logical, intent(in)            :: parity
      real(RD), intent(in), optional :: pre_fac

      integer  :: m
      integer  :: k
      real(RD) :: B(4,4)

      @:CHECK_BOUNDS(SIZE(A, 1),2*(2*N+1))
      @:CHECK_BOUNDS(SIZE(A, 2),2*(2*N+1))

      ! Evaluate the split-parity system matrix A(+/-)

      A = 0

      k = 1

      block_loop: do m = 0, N

         call eval_block_m(N, m, pa, B) 

         if (m == 0) then
            if (parity) then
               A(k:k+1,k:k+1) = B([1,4],[1,4])
            else
               A(k:k+1,k:k+1) = B([2,3],[2,3])
            end if
         else
            A(k:k+3,k:k+3) = B
         end if

         if (m > 0) then

            call eval_block_mm1(N, m, pa, B)

            if (m == 1) then
               if (parity) then
                  A(k:k+3,k-2:k-1) = B(:,[1,4])
               else
                  A(k:k+3,k-2:k-1) = B(:,[2,3])
               end if
            else
               A(k:k+3,k-4:k-1) = B
            end if

         end if

         if (m < N) then

            call eval_block_mp1(N, m, pa, B)

            if (m == 0) then
               if (parity) then
                  A(k:k+1,k+2:k+5) = 2*B([1,4],:)
               else
                  A(k:k+1,k+2:k+5) = 2*B([2,3],:)
               end if
            else
               A(k:k+3,k+4:k+7) = B
            end if
         end if

         if (m == 0) then
            k = k + 2
         else
            k = k + 4
         end if

      end do block_loop

      ! If necessary, apply the preconditioning factor

      if (PRESENT(pre_fac)) A = A*pre_fac

   end subroutine eval_matrix_split

   ! !****

   ! subroutine eval_prod(N, pa, x, y)

   !    integer, intent(in)        :: N
   !    type(params_t), intent(in) :: pa
   !    real(RD), intent(in)       :: x(:)
   !    real(RD), intent(out)      :: y(:)

   !    integer  :: i
   !    integer  :: m
   !    real(RD) :: B(4,4)

   !    @:CHECK_BOUNDS(SIZE(x), 4*(2*N+1))
   !    @:CHECK_BOUNDS(SIZE(y), 4*(2*N+1))

   !    ! Evaluate the system matrix operating as y <- A*x

   !    i = 1

   !    do m = -N, N

   !       call eval_D(N, m, pa, B)
   !       y(i:i+3) = MATMUL(B, x(i:i+3))

   !       if(m > -N) then
   !          call eval_L(N, m, pa, B)
   !          y(i:i+3) = y(i:i+3) +  MATMUL(B, x(i-4:i-1))
   !       end if

   !       if(m < N) then
   !          call eval_U(N, m, pa, B)
   !          y(i:i+3) = y(i:i+3) + MATMUL(B, x(i+4:i+7))
   !       end if

   !       i = i + 4

   !    end do

   ! end subroutine eval_prod

end module matrix_m
