#:include 'forum.inc'

module matrix_m

   ! Uses

   use forum_m
   use flags_m
   use params_m
   use matrix_full_m
   use matrix_lpn_m
   use matrix_lpn_qs_m

   use parasite_model_matrices

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   private

   public :: get_matrix_dim
   public :: eval_matrix

contains

   subroutine get_matrix_dim(N, fl, D, parity)

      integer, intent(in)           :: N
      type(flags_t), intent(in)     :: fl
      integer, intent(out)          :: D
      logical, intent(in), optional :: parity

      if (fl%split) then
         @:ASSERT(PRESENT(parity), 'need to specify parity when split=.TRUE.')
      end if

      ! Given the parameters, get the matrix dimension

      if (fl%use_lpn_qs) then

         if (fl%split) then
            D = 2*N + 1
         else
            D = 4*N + 2
         end if

      elseif (fl%use_lpn) then

         if (fl%split) then

            if (parity) then
               D = 3*N + 2
            else
               D = 3*N + 1
            end if

         else

            D = 6*N + 3

         end if

      else

         if (fl%split) then

            D = 4*N + 2

         else

            D = 8*N + 4

         end if

      end if

      ! Finish

      return

   end subroutine get_matrix_dim
      
   !****

   subroutine eval_matrix(pa, fl, A, parity)

      type(params_t), intent(in)    :: pa
      type(flags_t), intent(in)     :: fl
      real(RD), intent(out)         :: A(:,:)
      logical, intent(in), optional :: parity

      real(RD), allocatable :: A_(:,:)
      integer               :: D

      if (fl%split) then
         @:ASSERT(PRESENT(parity), 'need to specify parity when split=.TRUE.')
      end if

      ! Evaluate the system matrix A

      if (fl%use_mesa) then

         if (fl%use_lpn_qs) then

            if (fl%split) then

               if (parity) then
                  call build_parasite_matrix_LPN_QS(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                     pa%lam_f, pa%l_f, pa%N, A_, 'EVEN')
               else
                  call build_parasite_matrix_LPN_QS(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                     pa%lam_f, pa%l_f, pa%N, A_, 'ODD')
               end if

            else

               call build_parasite_matrix_LPN_QS(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                  pa%lam_f, pa%l_f, pa%N, A_)

            end if

         elseif (fl%use_lpn) then
            
            if (fl%split) then
               
               if (parity) then
                  call build_parasite_matrix_LPN(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                     pa%lam_f, pa%l_f, pa%N, A_, 'EVEN')
               else
                  call build_parasite_matrix_LPN(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                     pa%lam_f, pa%l_f, pa%N, A_, 'ODD')
               end if

            else

               call build_parasite_matrix_LPN(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                  pa%lam_f, pa%l_f, pa%N, A_)

            end if

         else
            
            if (fl%split) then
               
               if (parity) then

                  call build_parasite_matrix(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                     pa%lam_f, pa%l_f, pa%N, A_, 'EVEN')

               else

                  call build_parasite_matrix(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                     pa%lam_f, pa%l_f, pa%N, A_, 'ODD')

               end if

            else

               call build_parasite_matrix(pa%w_f, pa%k_z, pa%Pr, pa%tau, pa%R_0, pa%H_B, pa%D_B, &
                  pa%lam_f, pa%l_f, pa%N, A_)

            end if

         end if

         A = A_

      else
         
         if (fl%use_lpn_qs) then

            call eval_matrix_lpn_qs(pa, fl, A, parity)

         elseif (fl%use_lpn) then

            call eval_matrix_lpn(pa, fl, A, parity)

         else

            call eval_matrix_full(pa, fl, A, parity)

         end if

      end if

      ! If necessary, reverse the order of the matrix

      if (fl%reorder) then

         D = SIZE(A, 1)

         A = A(D:1:-1,D:1:-1)

      end if

   end subroutine eval_matrix

end module matrix_m
